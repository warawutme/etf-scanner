import streamlit as st
import pandas as pd
import yfinance as yf
from breakout_scanner import calculate_technical_indicators, generate_signals, assess_market_condition

# ====== ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö ======
st.set_page_config(page_title="Breakout Auto ETF Scanner", layout="wide")
st.markdown("## üìà Breakout Auto ETF Scanner (YFinance Edition)")
st.caption("Powered by ‡∏°‡∏≤‡∏ö‡∏≠‡∏¢ üêÉüî•")

# ====== ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ ETF ‡πÅ‡∏•‡∏∞ Market Filter ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ======
tickers = ['YINN', 'FNGU', 'SOXL', 'FXI', 'EURL', 'TNA', 'GDXU']
market_filters = ['SPY', 'QQQ']

selected_etf = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ETF ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô", tickers)
selected_market = st.sidebar.selectbox("üîç ‡πÉ‡∏ä‡πâ Market Filter ‡∏à‡∏≤‡∏Å ETF:", market_filters)

# ====== ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏•‡∏≤‡∏î (‡πÉ‡∏ä‡πâ SPY ‡∏´‡∏£‡∏∑‡∏≠ QQQ) ======
try:
    market_df = yf.download(selected_market, period='3mo', interval='1d', progress=False)
    market_df = market_df[['Close']].dropna()
    market_df = calculate_technical_indicators(market_df)
    market_status = assess_market_condition(market_df)
except Exception as e:
    market_status = "Unknown"
    st.sidebar.warning(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏™‡∏†‡∏≤‡∏û‡∏ï‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å {selected_market} ‡πÑ‡∏î‡πâ")

# ====== ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡∏•‡∏≤‡∏î‡πÉ‡∏ô Sidebar ======
st.sidebar.subheader("üìà Market Filter")
st.sidebar.markdown(f"**Market Status ({selected_market}):** `{market_status}`")

# ====== ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ETF ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ======
try:
    df = yf.download(selected_etf, period='3mo', interval='1d', progress=False)
    df = df[['Date', 'Open', 'High', 'Low', 'Close', 'Volume']] if 'Date' in df.columns else df
    df.reset_index(inplace=True)
    df.columns.name = None
    df['Date'] = pd.to_datetime(df['Date'])
except Exception as e:
    st.error(f"‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
    st.stop()

# ====== ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏¥‡∏ô‡∏î‡∏¥‡πÄ‡∏Ñ‡πÄ‡∏ï‡∏≠‡∏£‡πå ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì ======
try:
    df = calculate_technical_indicators(df)
    df = generate_signals(df, market_status)
except Exception as e:
    st.error(f"‚ùå ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏¥‡∏ô‡∏î‡∏¥‡πÄ‡∏Ñ‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
    st.stop()

# ====== ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ======
latest = df.iloc[-1]
latest_date = latest['Date'].date() if pd.notnull(latest['Date']) else "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"

st.markdown(f"### üß† ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: `{selected_etf}`")
st.markdown(f"- üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: `{latest_date}`")
st.markdown(f"- üìä ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì: **{latest['Signal']}**")
st.markdown(f"- RSI: `{float(latest['Rsi']):.2f}`")
st.markdown(f"- MACD: `{float(latest['Macd']):.2f}`")
st.markdown(f"- EMA20: `{float(latest['Ema20']):.2f}`")

# ====== ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á ======
with st.expander("üîç ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á"):
    st.dataframe(df.tail(30), use_container_width=True)
