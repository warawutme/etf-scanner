import streamlit as st
import pandas as pd
import yfinance as yf
from breakout_scanner import calculate_technical_indicators, generate_signals, assess_market_condition

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
st.set_page_config(page_title="Breakout Auto ETF Scanner", layout="wide")
st.markdown("## üìà Breakout Auto ETF Scanner (YFinance Edition)")
st.caption("Powered by ‡∏°‡∏≤‡∏ö‡∏≠‡∏¢ üêÉüî•")

# ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ ETF
tickers = ['YINN', 'FNGU', 'SOXL', 'FXI', 'EURL', 'TNA', 'GDXU']
market_refs = ['SPY', 'QQQ', 'DIA']  # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Market Filter ‡πÑ‡∏î‡πâ

# ===== Sidebar =====
st.sidebar.markdown("### üß≠ ‡πÉ‡∏ä‡πâ Market Filter ‡∏à‡∏≤‡∏Å ETF:")
market_etf = st.sidebar.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ETF ‡∏ï‡∏•‡∏≤‡∏î", market_refs, index=0)
st.sidebar.subheader("üìà Market Filter")

# ‚úÖ ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô Market Status ‡∏à‡∏≤‡∏Å ETF ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á
try:
    market_df = yf.download(market_etf, period='3mo', interval='1d', progress=False)
    market_df = market_df[['Open', 'High', 'Low', 'Close', 'Volume']].dropna()
    market_df.reset_index(inplace=True)
    market_df.columns.name = None
    market_df['Date'] = pd.to_datetime(market_df['Date'])
    market_df = calculate_technical_indicators(market_df)
    market_status = assess_market_condition(market_df)
except Exception as e:
    market_status = "Unknown"
    st.sidebar.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ï‡∏•‡∏≤‡∏î‡πÑ‡∏î‡πâ")

st.sidebar.markdown(f"**Market Status ({market_etf}):** `{market_status}`")

# ===== Main Section =====
selected_etf = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ETF ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô", tickers)

# ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ETF ‡∏´‡∏•‡∏±‡∏Å
try:
    df = yf.download(selected_etf, period='3mo', interval='1d', progress=False)
    df = df[['Open', 'High', 'Low', 'Close', 'Volume']].dropna()
    df.reset_index(inplace=True)
    df.columns.name = None
    df['Date'] = pd.to_datetime(df['Date'])
except Exception as e:
    st.error(f"‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ETF ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
    st.stop()

# ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏¥‡∏ô‡∏î‡∏¥‡πÄ‡∏Ñ‡πÄ‡∏ï‡∏≠‡∏£‡πå + ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
try:
    df = calculate_technical_indicators(df)
    df = generate_signals(df, market_status)
except Exception as e:
    st.error(f"‚ùå ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏¥‡∏ô‡∏î‡∏¥‡πÄ‡∏Ñ‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
    st.stop()

# ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
latest = df.iloc[-1] if not df.empty else None

if latest is not None:
    # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Error ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    try:
        latest_date = latest['Date'].date() if pd.notnull(latest['Date']) else "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"
    except:
        latest_date = "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"

    st.markdown(f"### üß† ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: `{selected_etf}`")
    st.markdown(f"- üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: `{latest_date}`")
    st.markdown(f"- üìä ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì: **{latest['Signal']}**")
    st.markdown(f"- RSI: `{float(latest['Rsi']):.2f}`")
    st.markdown(f"- MACD: `{float(latest['Macd']):.2f}`")
    st.markdown(f"- EMA20: `{float(latest['Ema20']):.2f}`")
else:
    st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")

# ‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á
with st.expander("üîç ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á"):
    st.dataframe(df.tail(30), use_container_width=True)
