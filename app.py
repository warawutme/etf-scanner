
import streamlit as st
import pandas as pd
import plotly.graph_objects as go
from breakout_scanner import fetch_etf_data, calculate_technical_indicators, generate_signals, assess_market_condition

st.set_page_config(page_title="ETF Breakout Scanner", layout="wide")

st.title("üìà Breakout Auto ETF Scanner (YFinance Edition)")

# ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ ETF ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
etfs = ['TQQQ', 'YINN', 'FNGU', 'SOXL', 'FXI', 'EURL', 'TNA', 'GDXU', 'JNUG']

# ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ETF ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á
selected_etf = st.sidebar.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ETF", etfs)

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
with st.spinner("üì° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏•‡∏≤‡∏î..."):
    try:
        data = fetch_etf_data(selected_etf)
        market_data = fetch_etf_data("SPY")  # ‡πÉ‡∏ä‡πâ SPY ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏ó‡∏ô‡∏ï‡∏•‡∏≤‡∏î
        market_status = assess_market_condition(market_data)
        data = calculate_technical_indicators(data)
        data = generate_signals(data, market_status)
        last_signal = data['signal'].iloc[-1]
    except Exception as e:
        st.error("‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ä‡πá‡∏Å‡∏ä‡∏∑‡πà‡∏≠ ETF")
        st.stop()

# ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡∏•‡∏≤‡∏î
st.subheader(f"üß≠ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡∏•‡∏≤‡∏î‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ: `{market_status}`")

# ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
st.metric("üìä ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î", last_signal, delta=None)

# ‡∏Å‡∏£‡∏≤‡∏ü‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Å‡∏±‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
fig = go.Figure()
fig.add_trace(go.Candlestick(
    x=data.index,
    open=data['open'], high=data['high'],
    low=data['low'], close=data['close'],
    name='Price'
))
fig.add_trace(go.Scatter(x=data.index, y=data['ema20'], name='EMA20', line=dict(color='blue')))
fig.add_trace(go.Scatter(x=data.index, y=data['ema50'], name='EMA50', line=dict(color='orange')))
fig.update_layout(title=f'{selected_etf} Price Chart with EMA', xaxis_title='Date', yaxis_title='Price')
st.plotly_chart(fig, use_container_width=True)

# ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ
st.subheader("üìã ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
st.dataframe(data[['close', 'rsi', 'macd', 'volume_ratio', 'signal']].tail(10))

# Footer
st.caption("¬© ‡∏°‡∏≤‡∏ö‡∏≠‡∏¢ Auto Scanner | Powered by yfinance + Streamlit")
