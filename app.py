import streamlit as st
import pandas as pd
import yfinance as yf
from breakout_scanner import calculate_technical_indicators, generate_signals, assess_market_condition

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
st.set_page_config(page_title="Breakout Auto ETF Scanner", layout="wide")
st.markdown("## üìà Breakout Auto ETF Scanner (YFinance Edition)")
st.caption("Powered by ‡∏°‡∏≤‡∏ö‡∏≠‡∏¢ üêÉüî•")

# ============================
# Sidebar: Market Filter
# ============================
st.sidebar.markdown("### üß≠ ‡πÉ‡∏ä‡πâ Market Filter ‡∏à‡∏≤‡∏Å ETF:")
market_etfs = ['SPY', 'QQQ', 'DIA']
market_etf = st.sidebar.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ETF ‡∏ï‡∏•‡∏≤‡∏î", market_etfs)

try:
    market_df = yf.download(market_etf, period='3mo', interval='1d', progress=False)
    market_df = market_df[['Open', 'High', 'Low', 'Close', 'Volume']].dropna()
    market_df.reset_index(inplace=True)
    market_df['Date'] = pd.to_datetime(market_df['Date'])
    market_df = calculate_technical_indicators(market_df)
    market_status = assess_market_condition(market_df)
except Exception as e:
    market_status = "Unknown"
    st.sidebar.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏™‡∏†‡∏≤‡∏û‡∏ï‡∏•‡∏≤‡∏î‡πÑ‡∏î‡πâ")

st.sidebar.subheader("üìà Market Filter")
st.sidebar.markdown(f"**Market Status ({market_etf}):** `{market_status}`")

# ============================
# Main: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ETF ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π
# ============================
tickers = ['YINN', 'FNGU', 'SOXL', 'FXI', 'EURL', 'TNA', 'GDXU']
selected_etf = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ETF ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô", tickers)

try:
    df = yf.download(selected_etf, period='3mo', interval='1d', progress=False)
    df = df[['Open', 'High', 'Low', 'Close', 'Volume']].dropna()
    df.reset_index(inplace=True)
    df['Date'] = pd.to_datetime(df['Date'])
except Exception as e:
    st.error(f"‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
    st.stop()

# ============================
# ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏¥‡∏ô‡∏î‡∏¥‡πÄ‡∏Ñ‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
# ============================
try:
    df = calculate_technical_indicators(df)
    df = generate_signals(df, market_status)
except Exception as e:
    st.error(f"‚ùå ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏¥‡∏ô‡∏î‡∏¥‡πÄ‡∏Ñ‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
    st.stop()

# ============================
# ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
# ============================
latest = df.iloc[-1]

st.markdown(f"### üß† ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: `{selected_etf}`")

# ‡πÄ‡∏ä‡πá‡∏Å‡∏ß‡πà‡∏≤ latest['Date'] ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
if 'Date' in latest and pd.notnull(latest['Date']):
    st.markdown(f"- üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: `{latest['Date'].date()}`")
else:
    st.markdown("- üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà`")

# ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
signal = str(latest['Signal']) if 'Signal' in latest else 'N/A'
rsi = float(latest['Rsi']) if 'Rsi' in latest and pd.notnull(latest['Rsi']) else 0
macd = float(latest['Macd']) if 'Macd' in latest and pd.notnull(latest['Macd']) else 0
ema20 = float(latest['Ema20']) if 'Ema20' in latest and pd.notnull(latest['Ema20']) else 0

st.markdown(f"- üìä ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì: **{signal}**")
st.markdown(f"- RSI: `{rsi:.2f}`")
st.markdown(f"- MACD: `{macd:.2f}`")
st.markdown(f"- EMA20: `{ema20:.2f}`")

# ============================
# ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á
# ============================
with st.expander("üîç ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á"):
    st.dataframe(df.tail(30), use_container_width=True)

